@page "/stores/delete/{id:guid}"
@rendermode InteractiveServer

@using Microsoft.AspNetCore.Authorization
@inject NavigationManager navigationManager
@inject IEndpointsClient client

@attribute [Authorize]

<PageTitle>Delete Store</PageTitle>

<AuthorizeView>
    <Authorized>
        @if (@context.User.IsInRole(UserRoles.Admin))
        {
            @if (CurrentStore is null)
            {
                <p>...Loading...</p>
            }
            else
            {
                <div class="container">
                    <br />
                    <NavLink class="btn btn-primary" href="@($"stores/")">
                        Back
                    </NavLink>
                    <br />
                    <div class="row justify-content-center">
                        <div class="col col-lg-15">
                            <div class="card-header h3 milad-block">
                                <p>Do you want to delete @CurrentStore.StoreName?</p>
                            </div>
                            <div class="card-body">
                                <div class="form-group row mb-3">
                                    <div>
                                        Once you have deleted @CurrentStore.StoreName, you cannot undo this.
                                        Do you want to process?
                                    </div>
                                </div>
                                <div class="form-group row mb-3">
                                    <label class="col-md-2 col-form-label">Name: <span class="text-danger">*</span></label>
                                    <div class="col-md-10">
                                        @CurrentStore.StoreName
                                    </div>
                                </div>
                                <div class="form-group row mb-3">
                                    <label class="col-md-2 col-form-label">Number: <span class="text-danger">*</span></label>
                                    <div class="col-md-10">
                                        @CurrentStore.Number
                                    </div>
                                </div>
                                <div class="form-group row mb-3">
                                    <label class="col-md-2 col-form-label">Address: </label>
                                    <div class="col-md-10">
                                        @CurrentStore.Address
                                    </div>
                                </div>

                                <div class="form-group row mb-3">
                                    <label class="col-md-2 col-form-label">City: </label>
                                    <div class="col-md-10">
                                        @CurrentStore.City
                                    </div>
                                </div>

                                <div class="form-group row mb-3">
                                    <label class="col-md-2 col-form-label">Region: </label>
                                    <div class="col-md-10">
                                        @CurrentStore.Region
                                    </div>
                                </div>

                                <div class="form-group row mb-3">
                                    <label class="col-md-2 col-form-label">PostalCode: </label>
                                    <div class="col-md-10">
                                        @CurrentStore.PostalCode
                                    </div>
                                </div>

                                <div class="form-group row mb-3">
                                    <label class="col-md-2 col-form-label">Country: </label>
                                    <div class="col-md-10">
                                        @CurrentStore.Country
                                    </div>
                                </div>

                                <div class="form-group row mb-3">
                                    <label class="col-md-2 col-form-label">Phone: </label>
                                    <div class="col-md-10">
                                        @CurrentStore.Phone
                                    </div>
                                </div>

                                <div class="form-group row mb-3">
                                    <label class="col-md-2 col-form-label">Email: </label>
                                    <div class="col-md-10">
                                        @CurrentStore.Email
                                    </div>
                                </div>

                                <div class="form-group row mb-3">
                                    <label class="col-md-2 col-form-label">StoreOwner: </label>
                                    <div class="col-md-10">
                                        @CurrentStore.StoreOwner
                                    </div>
                                </div>
                                <div class="mt-3">
                                    <Button Color="ButtonColor.Danger" Type="ButtonType.Button" @onclick=DeleteConfirm>
                                        Confirm Deletion
                                    </Button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            }
        }
        else
        {
            <p>You're not signed in as a user in @UserRoles.Admin.</p>
        }
    </Authorized>
    <NotAuthorized>
        <p>You're not loggged in.</p>
    </NotAuthorized>
</AuthorizeView>
@code {
    [Parameter]
    public Guid Id { get; set; }

    private RetailStore? CurrentStore { get; set; }

    private string ErrorMsg { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        CurrentStore = await client.GetStoreAsync(Id);
    }

    private async Task DeleteConfirm(MouseEventArgs e)
    {
        var response = await client.DeleteStoreAsync(Id);
        
        if (response == null)
        {
            ErrorMsg = "Error deleting store";
            return;
        }

        if (response.Httpstatus == 200)
        {
            navigationManager.NavigateTo("/stores");
        }
        else
        {
            //arr into an single string
            ErrorMsg = string.Join(",", response.Errors);
        }
    }
}