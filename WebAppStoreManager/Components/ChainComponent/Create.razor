@page "/chains/create"
@rendermode InteractiveServer

@using Microsoft.AspNetCore.Authorization
@inject NavigationManager navigationManager
@inject IEndpointsClient client
@attribute [Authorize]

<PageTitle>Create Chain</PageTitle>
<style>
    .valid.modified:not([type=checkbox]) {
        outline: 1px solid #26b050;
    }

    .invalid {
        outline: 1px solid red;
    }

    .validation-message {
        color: red;
    }
</style>

<AuthorizeView>
    <Authorized>
        @if (@context.User.IsInRole(UserRoles.Admin))
        {
            @if (CurrentChain is null)
            {
                <p>...Loading...</p>
            }
            else
            {
                <div class="container">
                    <br />
                    <NavLink class="btn btn-primary" href="@($"chains/")">
                        Back
                    </NavLink>
                    <br />
                    @if (string.IsNullOrEmpty(ErrorMsg) == false)
                    {
                        <div class="alert alert-danger" role="alert">
                            @ErrorMsg
                        </div>
                    }
                    <div class="row justify-content-center">
                        <div class="col col-lg-15">
                            <EditForm Context="edit" class="card mt-7" Model="@CurrentChain" OnValidSubmit="HandleValidSubmit">
                                <DataAnnotationsValidator />
                                <div class="mt-@(edit.Validate() is false ? "3" : "0")">
                                    <ValidationSummary />
                                </div>
                                <div class="card-header h3 milad-block">
                                    <p>CREATE CHAIN</p>
                                </div>
                                <div class="card-body">
                                    <div class="form-group row mb-3">
                                        <label class="col-md-2 col-form-label">Name: <span class="text-danger">*</span></label>
                                        <div class="col-md-10">
                                            <InputText class="form-control" @bind-Value="CurrentChain.ChainName" Placeholder="Enter name" />
                                            <ValidationMessage For="@(() => CurrentChain.ChainName)" />
                                        </div>
                                    </div>
                                    <div class="mt-3">
                                        <Button Color="ButtonColor.Primary" Type="ButtonType.Submit" Disabled="@(edit.Validate() is false)">
                                            Send
                                        </Button>
                                    </div>
                                </div>
                                
                            </EditForm>
                        </div>
                    </div>
                </div>
            }
        }
        else
        {
            <p>You're not signed in as a user in @UserRoles.Admin.</p>
        }
    </Authorized>
    <NotAuthorized>
        <p>You're not loggged in.</p>
    </NotAuthorized>
</AuthorizeView>
@code {
    private RetailChain? CurrentChain { get; set; }

    private string ErrorMsg { get; set; } = string.Empty;

    protected override void OnInitialized()
    {
        CurrentChain = new RetailChain() { ChainName = string.Empty };
    }

    private async Task HandleValidSubmit()
    {
        if (CurrentChain == null) return;

        var response = await client.CreateChainAsync(CurrentChain);
        
        if (response == null)
        {
            ErrorMsg = "Error creating chain";
            return;
        }

        if (response.Httpstatus == 200)
        {
            navigationManager.NavigateTo("/chains");
        }
        else
        {
            //arr into an single string
            ErrorMsg = string.Join(",", response.Errors);
        }
    }
}